//.reduce()
//reduce the elements of an array to a SINGLE value
const prices = [5, 30, 10, 25, 15, 20];
//acummulator = previous element, element = current element
function totalPrice(acummulator, element){
    return acummulator + element;
}
const total = prices.reduce(totalPrice);
console.log(total);


const grades = [75, 50, 90, 80, 65, 95];
function max(acummulator, element){
    return Math.max(acummulator,element);
}
const maxElement = grades.reduce(max);
console.log(maxElement);


//FUNCTION EXPRESSIONS = a way to define functions as values or variables
//it is helpfull when you are going to use the function only one time
const hello = function(){
    console.log("Hello");
}
hello();

//setTimeOut(callback, timeYouWantToWait) 3000ms-> 3 seconds
//here you can see a function expression because the function is defined as a variable(parameter)
setTimeout(function(){
    console.log("Hello");},3000);

const numbers = [1,2,3,4,5,6];
const squares = numbers.map(function(element){
    return element ** 2;
});
console.log(squares);

const evenNums = numbers.filter(function(element){
    return element % 2 === 0;
})
console.log(evenNums);

const totalNum = numbers.reduce(function(acummulator,element){
    return acummulator + element;
})
console.log(totalNum);
