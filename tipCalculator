//HTML CODE
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tip calculator</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1 id="h1">TIP CALCULATOR</h1>
          <div class="wrapper">
        <p id="billAmount">Bill amount</p>
        <input id="amount" type="text" placeholder="Amount to be paid?">
        <p id="service?">How was the service?</p>
        <select id="services">
        <option selected disabled hidden>select</option>
        <option value="0.25">25% - Perfect</option>
        <option value="0.20">20% - Excellent</option>
        <option value="0.15">15% - Great</option>
        <option value="0.10">10% - Okey</option>
        <option value="0.05">25% - Bad</option>
        </select>
        <p id="totNum">Total number of persons</p>
        <input type="text" id="numOfPeople" placeholder="number of people sharing the bill">
        <button id="calculate" onclick="calculate()">CALCULATE</button>
      </div>

      <div class="tip">
         <p id="tipAmount">Tip Amount:</p>
         <span id="totalEach"></span>
      </div>
    </div>
    
<script src="index.js"></script>
</body>
</html>



//CSS CODE
body{
    background-color: hsl(0, 0%, 30%);
    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
}
.container{
    margin-top: 20px;
    width: 350px;
    height: 650px;
    background-color: hsl(0, 0%, 90%);
    align-items: center;
    position: absolute;
    left: 50%;
    right: 50%;
    transform: translate(-50%);
    border-radius: 20px;
    padding: 20px;
    box-sizing: border-box;
}
#h1{
    font-size: 2.5rem;
    background-color: rgb(63, 172, 230);
    border-radius: 10px;
    left: 50%;
    top: -60px;
    width: 300px;
    color: white;
    text-align: center;
}
.wrapper {
    padding: 20px;
}
input,
select{
    width: 250px;
    border-radius: 2px;
    border: none;
    border-bottom: 1px solid hsl(0, 0%, 20%);
    padding: 10px;
}
select {
    width: 88% ;
}
button{
    margin: 20px auto;
    width: 150px;
    height: 50px;
    border-radius: 10px;
    border: none;
    background-color:hsl(201, 77%, 40%);
    color: white;
    font-size: 1.5rem;
    font-weight: bold;
    cursor: pointer;
    display: inline-block;
}
button:hover{
    background-color:hsl(201, 77%, 60%);
}
.tip{
    background-color: white;
    border-radius: 10px;
    border: none;
    text-align: center;
    font-size: 1.4rem;
}
 
 
//JAVASCRIPT CODE
//JSON 
//(JavaScript Object Notation) data-interchange format
//Used for exchangine data between a server and a web application
//JSON files (key:value} OR [valuel, value2, value3]

//JSON. stringify = converts a JS object to a JSON string.
//JSON.parse = converts a JSON string to a us object

//to create a json file you add a file with the .json notation
// person.json
//inside this file you could write for example :
//["Eftelya", "Ece", "Melis", "Melisa"]
// or could write inside like :
/*
{
    "name" : "Eftelya",
    "age" : 21,
    "isEmployed" : true
}
*/

//if we want to convert such a data to string : JSON.stringify
const names= ["Eftelya", "Ece", "Melis", "Melisa"];
const jsonNames = JSON.stringify(names);
console.log(jsonNames);

const person = [{
    "name" : "Eftelya", "age" : 21, "isEmployed" : true},
    {"name" : "Eftelya", "age" : 21, "isEmployed" : true}];
const jsonPerson = JSON.stringify(person);
console.log(jsonPerson);

//to convert string to data : JSON.parse
const jnames= `["name1", "name2", "name3", "name4"]`;
const newNames = JSON.parse(jnames);
console.log(newNames);

const jperson = `[{
    "name" : "Eftelya", "age" : 21, "isEmployed" : true},
    {"name" : "Eftelya", "age" : 21, "isEmployed" : true}]`;
const newPerson = JSON.parse(jperson);
console.log(newPerson);

//fetch : 
//the process of grabbing data from the database and making it available to the application.
fetch("https://pokeapi.co/api/v2/pokemon/pikachu")
.then(response =>{
    if(!response.ok){
        throw new error("Could not found fetch.");
    }
    else{
        return response.json();
    }
})
.then(data => console.log(data))
.catch(error => console.error(error));


async function fetchData(){
    try{
        const pokemonNameElement = document.getElementById("pokemonName");
        const pokemonName = pokemonNameElement.value.toLowerCase();

       const response =  await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonName}`);
       if(!response.ok){
        throw new error("Could not found fetch.");
       }
       else{
        const data = await response.json();
        const pokemonImg = data.sprites.front_default;
    
        const imgElement = document.getElementById("pokemon");
        imgElement.src = pokemonImg;
        imgElement.style.display = "block";
        console.log(data);
       }
    }
    catch(error){
        console.log(error);
    }
}
fetchData();
    
