//SUPER
//keyword is used in classes to call the constructor or access the properties and 
//methods of a parent (superclass)
//this = this object
//super = the parent

class Animal{
    constructor(name,age){
       this.name = name;
       this.age = age;
    }
    move(speed){
        console.log(`This ${this.name} moves at a speed of ${speed}mph.`);
    }
 }

 class Rabbit extends Animal{
    constructor(name,age,runSpeed){
       super(name,age);
       this.runSpeed = runSpeed;
    }
    run(){
        super.move(this.runSpeed);
    }
 }

 const rabbit = new Rabbit("rabbit",2,25);
 console.log(rabbit.name);
 console.log(rabbit.age);
 console.log(rabbit.runSpeed);
 rabbit.run();


 //GETTER & SETTER
 //getter = special method that makes a property readable
 // setter =special method that makes a property writeable
 class Rectange{
    constructor(width, height){
        this.height = height;
        this.width = width;
    }

    set width(newWidth){
        if(newWidth > 0){
            this._width = newWidth;
        }
        else{
            console.error("Width must be a positive number.");
        }
    }

    set height(newHeight){
        if(newHeight > 0){
            this._height = newHeight;
        }
        else{
            console.error("Height must be a positive number.");
        }
    }

    get width(){
        return this._width;
    }
    get height(){
        return this._height;
    }
    //eventho area is not in the constructor because of getters we can find it
    get area(){
        return this._height * this._width;
    }
 }

 const rectange = new Rectange(2,3);
 console.log(rectange.width);
 console.log(rectange.height);
 console.log(rectange.area);



 class Person{
    constructor(firstName,lastName, age){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }
    set firstName(newFirstName){
        if(typeof newFirstName === "string" && newFirstName.length > 0){
            this._firstName = newFirstName;
        }
        else{
            console.error("Please enter valid firstname.");
        }
    }
    set lastName(newLastName){
        if(typeof newLastName === "string" && newLastName.length > 0){
            this._lastName = newLastName;
        }
        else{
            console.error("Please enter valid lastname.");
        }
    }
    set age(newAge){
        if(newAge > 0 && typeof newAge === "number"){
            this._age = newAge;
        }
        else{
            console.error("Pleaser enter valid age.");
        }
    }
    get firstName(){
        return this._firstName;
    }
    get lastName(){
        return this._lastName;
    }
    get age(){
        return this._age;
    }
 }

const person = new Person("Eftelya", "SivridaÄŸ",21);
console.log(person.firstName);
console.log(person.lastName);
console.log(person.age);
